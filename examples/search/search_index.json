{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the TTK Examples! \u00b6 This website hosts a list of data analysis pipelines exemplifying the usage of TTK with ParaView and its Python API pvpython . This website is targeting novice users who are not power users of ParaView but who would like to get started with topological data analysis with TTK in Python. Each example includes: a screenshot (or a tutorial video) a short description the command line to reproduce the example with ParaView the corresponding Python code, to: load the input data execute the analysis pipeline store the output to disk (for later analysis or visualization, e.g. with ParaView ) a description of the inputs and outputs pointers to the corresponding C++/Python documentation This documentation assumes a default TTK installation (with the pvpython API support enabled) and that the repository ttk-data has been downloaded locally. List of available examples \u00b6 Scalar data \u00b6 Dragon example Morse persistence example Built-in example 1 Interaction site example Viscous fingering example Morse molecule example Tectonic puzzle example Ocean vortices example Contour around point example CT bones example Tribute example Image processing example Persistence driven compression example Morse-Smale quadrangulation example Bivariate scalar data \u00b6 Built-in example 2 Bivariate toy example Bivariate toy CSP peeling example Mechanical example Uncertain scalar data \u00b6 Built-in example 3 Uncertain starting vortex example Time-varying scalar data \u00b6 Time tracking example Merge tree feature tracking example Merge tree temporal reduction example Nested tracking graph example Ensemble scalar data \u00b6 Persistence diagram distance example Persistence diagram clustering example Merge tree clustering example Contour tree alignment example High-dimensional / point cloud data \u00b6 Persistence clustering gallery example Persistence clustering0 example Persistence clustering1 example Persistence clustering2 example Persistence clustering3 example Persistence clustering4 example Karhunen-Love Digits 64-Dimensions example 1-manifold learning example 1-manifold learning circles example 2-manifold learning example In-situ features \u00b6 Geometry approximation example Cinema darkroom example Misc features \u00b6 Manifold checks example","title":"Welcome to the TTK Examples!"},{"location":"#welcome-to-the-ttk-examples","text":"This website hosts a list of data analysis pipelines exemplifying the usage of TTK with ParaView and its Python API pvpython . This website is targeting novice users who are not power users of ParaView but who would like to get started with topological data analysis with TTK in Python. Each example includes: a screenshot (or a tutorial video) a short description the command line to reproduce the example with ParaView the corresponding Python code, to: load the input data execute the analysis pipeline store the output to disk (for later analysis or visualization, e.g. with ParaView ) a description of the inputs and outputs pointers to the corresponding C++/Python documentation This documentation assumes a default TTK installation (with the pvpython API support enabled) and that the repository ttk-data has been downloaded locally.","title":"Welcome to the TTK Examples!"},{"location":"#list-of-available-examples","text":"","title":"List of available examples"},{"location":"#scalar-data","text":"Dragon example Morse persistence example Built-in example 1 Interaction site example Viscous fingering example Morse molecule example Tectonic puzzle example Ocean vortices example Contour around point example CT bones example Tribute example Image processing example Persistence driven compression example Morse-Smale quadrangulation example","title":"Scalar data"},{"location":"#bivariate-scalar-data","text":"Built-in example 2 Bivariate toy example Bivariate toy CSP peeling example Mechanical example","title":"Bivariate scalar data"},{"location":"#uncertain-scalar-data","text":"Built-in example 3 Uncertain starting vortex example","title":"Uncertain scalar data"},{"location":"#time-varying-scalar-data","text":"Time tracking example Merge tree feature tracking example Merge tree temporal reduction example Nested tracking graph example","title":"Time-varying scalar data"},{"location":"#ensemble-scalar-data","text":"Persistence diagram distance example Persistence diagram clustering example Merge tree clustering example Contour tree alignment example","title":"Ensemble scalar data"},{"location":"#high-dimensional-point-cloud-data","text":"Persistence clustering gallery example Persistence clustering0 example Persistence clustering1 example Persistence clustering2 example Persistence clustering3 example Persistence clustering4 example Karhunen-Love Digits 64-Dimensions example 1-manifold learning example 1-manifold learning circles example 2-manifold learning example","title":"High-dimensional / point cloud data"},{"location":"#in-situ-features","text":"Geometry approximation example Cinema darkroom example","title":"In-situ features"},{"location":"#misc-features","text":"Manifold checks example","title":"Misc features"},{"location":"ctBones/","text":"CT bones example \u00b6 Pipeline description \u00b6 This example segments medical image data based on topological persistence. First, the PersistenceDiagram of the data is computed (top right view, above screenshot). Then, only the 5 most persistent maxima are selected, corresponding to the toes of the foot. Next, the input data is simplified based on the selected persistent features, via TopologicalSimplification . Next, the Split tree of the simplified data is computed. Finally, the geometry of the bones of the toes is extracted by selecting the regions (in the 3D data) attached to the leaves ( RegionType equals 1) of the Split tree (center view, above screenshot). To get a refined segmentation, change the persistence threshold from 180 down to 150 . Each toe will be subdivided into two segments, precisely along the joints. ParaView \u00b6 To reproduce the above screenshot, go to your ttk-data directory and enter the following command: $ paraview states/ctBones.pvsm Python code \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 #!/usr/bin/env python from paraview.simple import * # create a new 'XML Image Data Reader' ctBonesvti = XMLImageDataReader ( FileName = [ 'ctBones.vti' ]) # create a new 'TTK PersistenceDiagram' tTKPersistenceDiagram1 = TTKPersistenceDiagram ( Input = ctBonesvti ) tTKPersistenceDiagram1 . ScalarField = [ 'POINTS' , 'Scalars_' ] # create a new 'Threshold' threshold1 = Threshold ( Input = tTKPersistenceDiagram1 ) threshold1 . Scalars = [ 'CELLS' , 'PairIdentifier' ] threshold1 . ThresholdRange = [ 0 , 9999999.0 ] # create a new 'Threshold' persistenceThreshold = Threshold ( Input = threshold1 ) persistenceThreshold . Scalars = [ 'CELLS' , 'Persistence' ] persistenceThreshold . ThresholdRange = [ 180.0 , 255.0 ] # create a new 'TTK TopologicalSimplification' tTKTopologicalSimplification1 = TTKTopologicalSimplification ( Domain = ctBonesvti , Constraints = persistenceThreshold ) tTKTopologicalSimplification1 . ScalarField = [ 'POINTS' , 'Scalars_' ] # create a new 'TTK Merge and Contour Tree (FTM)' tTKMergeandContourTreeFTM1 = TTKMergeandContourTreeFTM ( Input = tTKTopologicalSimplification1 ) tTKMergeandContourTreeFTM1 . ScalarField = [ 'POINTS' , 'Scalars_' ] tTKMergeandContourTreeFTM1 . TreeType = 'Split Tree' # create a new 'Threshold' threshold3 = Threshold ( Input = OutputPort ( tTKMergeandContourTreeFTM1 , 2 )) threshold3 . Scalars = [ 'POINTS' , 'RegionType' ] threshold3 . ThresholdRange = [ 1.0 , 1.0 ] SaveData ( \"CTBonesOutputSegmentation.vtu\" , threshold3 ) Inputs \u00b6 ctBones.vti : a three-dimensional regular grid encoding material density in a medical image (CT scan). Outputs \u00b6 CTBonesOutputSegmentation.vtu : the geometry of the volume of the bones of the toes, as extracted by the analysis pipeline (most persistent super-level set connected components). C++/Python API \u00b6 ContourTree (FTM) PersistenceDiagram TopologicalSimplification","title":"CT bones example"},{"location":"ctBones/#ct-bones-example","text":"","title":"CT bones example"},{"location":"ctBones/#pipeline-description","text":"This example segments medical image data based on topological persistence. First, the PersistenceDiagram of the data is computed (top right view, above screenshot). Then, only the 5 most persistent maxima are selected, corresponding to the toes of the foot. Next, the input data is simplified based on the selected persistent features, via TopologicalSimplification . Next, the Split tree of the simplified data is computed. Finally, the geometry of the bones of the toes is extracted by selecting the regions (in the 3D data) attached to the leaves ( RegionType equals 1) of the Split tree (center view, above screenshot). To get a refined segmentation, change the persistence threshold from 180 down to 150 . Each toe will be subdivided into two segments, precisely along the joints.","title":"Pipeline description"},{"location":"ctBones/#paraview","text":"To reproduce the above screenshot, go to your ttk-data directory and enter the following command: $ paraview states/ctBones.pvsm","title":"ParaView"},{"location":"ctBones/#python-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 #!/usr/bin/env python from paraview.simple import * # create a new 'XML Image Data Reader' ctBonesvti = XMLImageDataReader ( FileName = [ 'ctBones.vti' ]) # create a new 'TTK PersistenceDiagram' tTKPersistenceDiagram1 = TTKPersistenceDiagram ( Input = ctBonesvti ) tTKPersistenceDiagram1 . ScalarField = [ 'POINTS' , 'Scalars_' ] # create a new 'Threshold' threshold1 = Threshold ( Input = tTKPersistenceDiagram1 ) threshold1 . Scalars = [ 'CELLS' , 'PairIdentifier' ] threshold1 . ThresholdRange = [ 0 , 9999999.0 ] # create a new 'Threshold' persistenceThreshold = Threshold ( Input = threshold1 ) persistenceThreshold . Scalars = [ 'CELLS' , 'Persistence' ] persistenceThreshold . ThresholdRange = [ 180.0 , 255.0 ] # create a new 'TTK TopologicalSimplification' tTKTopologicalSimplification1 = TTKTopologicalSimplification ( Domain = ctBonesvti , Constraints = persistenceThreshold ) tTKTopologicalSimplification1 . ScalarField = [ 'POINTS' , 'Scalars_' ] # create a new 'TTK Merge and Contour Tree (FTM)' tTKMergeandContourTreeFTM1 = TTKMergeandContourTreeFTM ( Input = tTKTopologicalSimplification1 ) tTKMergeandContourTreeFTM1 . ScalarField = [ 'POINTS' , 'Scalars_' ] tTKMergeandContourTreeFTM1 . TreeType = 'Split Tree' # create a new 'Threshold' threshold3 = Threshold ( Input = OutputPort ( tTKMergeandContourTreeFTM1 , 2 )) threshold3 . Scalars = [ 'POINTS' , 'RegionType' ] threshold3 . ThresholdRange = [ 1.0 , 1.0 ] SaveData ( \"CTBonesOutputSegmentation.vtu\" , threshold3 )","title":"Python code"},{"location":"ctBones/#inputs","text":"ctBones.vti : a three-dimensional regular grid encoding material density in a medical image (CT scan).","title":"Inputs"},{"location":"ctBones/#outputs","text":"CTBonesOutputSegmentation.vtu : the geometry of the volume of the bones of the toes, as extracted by the analysis pipeline (most persistent super-level set connected components).","title":"Outputs"},{"location":"ctBones/#cpython-api","text":"ContourTree (FTM) PersistenceDiagram TopologicalSimplification","title":"C++/Python API"},{"location":"dragon/","text":"Dragon example \u00b6 Pipeline description \u00b6 This example first loads a triangle mesh from disk. In a pre-processing, the mesh is smoothed and an elevation function is computed on top of it. The elevation function will be considered as the input scalar data in the remainder. Then, the PersistenceDiagram is computed and thresholds are applied base on persistence to maintain only the most persistent features. This results in a simplified persistence diagram (bottom right view in the above screenshot). The PersistenceCurve is also computed (top right view in the above screenshot). The simplified persistence diagram is then used as a constraint for the TopologicalSimplification of the input scalar data. This simplified data is then used as the input of the computation of ScalarFieldCriticalPoints (top left view, above screenshot) and the ContourTree (FTM) (bottom left view, above screenshot). ParaView \u00b6 To reproduce the above screenshot, go to your ttk-data directory and enter the following command: $ paraview states/dragon.pvsm Python code \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 #!/usr/bin/env python from paraview.simple import * # create a new 'XML Unstructured Grid Reader' dragonvtu = XMLUnstructuredGridReader ( FileName = [ 'dragon.vtu' ]) # create a new 'TTK GeometrySmoother' tTKGeometrySmoother1 = TTKGeometrySmoother ( Input = dragonvtu ) # create a new 'Calculator' elevation = Calculator ( Input = tTKGeometrySmoother1 ) elevation . ResultArrayName = 'Elevation' elevation . Function = 'coordsY' # create a new 'TTK PersistenceCurve' tTKPersistenceCurve1 = TTKPersistenceCurve ( Input = elevation ) tTKPersistenceCurve1 . ScalarField = [ 'POINTS' , 'Elevation' ] # create a new 'TTK PersistenceDiagram' tTKPersistenceDiagram1 = TTKPersistenceDiagram ( Input = elevation ) tTKPersistenceDiagram1 . ScalarField = [ 'POINTS' , 'Elevation' ] # create a new 'Threshold' pairs = Threshold ( Input = tTKPersistenceDiagram1 ) pairs . Scalars = [ 'CELLS' , 'PairIdentifier' ] pairs . ThresholdRange = [ 0.0 , 1000.0 ] # create a new 'Threshold' persistenceThreshold = Threshold ( Input = pairs ) persistenceThreshold . Scalars = [ 'CELLS' , 'Persistence' ] persistenceThreshold . ThresholdRange = [ 5.0 , 1000.0 ] # create a new 'TTK TopologicalSimplification' tTKTopologicalSimplification1 = TTKTopologicalSimplification ( Domain = elevation , Constraints = persistenceThreshold ) tTKTopologicalSimplification1 . ScalarField = [ 'POINTS' , 'Elevation' ] # create a new 'TTK ScalarFieldCriticalPoints' tTKScalarFieldCriticalPoints1 = TTKScalarFieldCriticalPoints ( Input = tTKTopologicalSimplification1 ) tTKScalarFieldCriticalPoints1 . ScalarField = [ 'POINTS' , 'Elevation' ] # create a new 'TTK Merge and Contour Tree (FTM)' tTKContourTree1 = TTKMergeandContourTreeFTM ( Input = tTKTopologicalSimplification1 ) tTKContourTree1 . ScalarField = [ 'POINTS' , 'Elevation' ] tTKContourTree1 . ArcSampling = 30 # create a new 'TTK GeometrySmoother' tTKGeometrySmoother2 = TTKGeometrySmoother ( Input = OutputPort ( tTKContourTree1 , 1 )) tTKGeometrySmoother2 . IterationNumber = 40 # create a new 'Extract Surface' extractSurface4 = ExtractSurface ( Input = tTKGeometrySmoother2 ) # create a new 'Tube' tube4 = Tube ( Input = extractSurface4 ) tube4 . NumberofSides = 12 tube4 . Radius = 0.75 # create a new 'TTK IcospheresFromPoints' tTKIcospheresFromPoints4 = TTKIcospheresFromPoints ( Input = tTKContourTree1 ) tTKIcospheresFromPoints4 . Radius = 2.0 # save the output SaveData ( 'PersistenceDiagram.vtu' , tTKPersistenceDiagram1 ) SaveData ( 'PersistenceCurve.csv' , OutputPort ( tTKPersistenceCurve1 , 3 )) SaveData ( 'CriticalPoints.vtp' , tTKScalarFieldCriticalPoints1 ) SaveData ( 'ContourTreeNodes.vtp' , tTKIcospheresFromPoints4 ) SaveData ( 'ContourTreeArcs.vtp' , tube4 ) Inputs \u00b6 dragon.vtu : a two-dimensional triangulation. Outputs \u00b6 PersistenceDiagram.vtu : the output persistence diagram in VTK file format (bottom right view, above screenshot). You are free to change the vtu file extension to that of any other supported file format (e.g. csv ) in the above python script. PersistenceCurve.csv : the output persistence curve. CriticalPoints.vtp : the output critical points in VTK file format (bottom right view, above screenshot). You are free to change the vtp file extension to that of any other supported file format (e.g. csv ) in the above python script. ContourTreeNode.vtp : spheres, representing the nodes of the output contour tree in VTK file format (bottom right view, above screenshot). You are free to change the vtp file extension to that of any other supported file format (e.g. csv ) in the above python script. ContourTreeArcs.vtp : cylinders, representing the arcs of the output contour tree in VTK file format (bottom right view, above screenshot). You are free to change the vtp file extension to that of any other supported file format (e.g. csv ) in the above python script. C++/Python API \u00b6 ContourTree (FTM) GeometrySmoother IcospheresFromPoints PersistenceCurve PersistenceDiagram ScalarFieldCriticalPoints TopologicalSimplification","title":"Dragon example"},{"location":"dragon/#dragon-example","text":"","title":"Dragon example"},{"location":"dragon/#pipeline-description","text":"This example first loads a triangle mesh from disk. In a pre-processing, the mesh is smoothed and an elevation function is computed on top of it. The elevation function will be considered as the input scalar data in the remainder. Then, the PersistenceDiagram is computed and thresholds are applied base on persistence to maintain only the most persistent features. This results in a simplified persistence diagram (bottom right view in the above screenshot). The PersistenceCurve is also computed (top right view in the above screenshot). The simplified persistence diagram is then used as a constraint for the TopologicalSimplification of the input scalar data. This simplified data is then used as the input of the computation of ScalarFieldCriticalPoints (top left view, above screenshot) and the ContourTree (FTM) (bottom left view, above screenshot).","title":"Pipeline description"},{"location":"dragon/#paraview","text":"To reproduce the above screenshot, go to your ttk-data directory and enter the following command: $ paraview states/dragon.pvsm","title":"ParaView"},{"location":"dragon/#python-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 #!/usr/bin/env python from paraview.simple import * # create a new 'XML Unstructured Grid Reader' dragonvtu = XMLUnstructuredGridReader ( FileName = [ 'dragon.vtu' ]) # create a new 'TTK GeometrySmoother' tTKGeometrySmoother1 = TTKGeometrySmoother ( Input = dragonvtu ) # create a new 'Calculator' elevation = Calculator ( Input = tTKGeometrySmoother1 ) elevation . ResultArrayName = 'Elevation' elevation . Function = 'coordsY' # create a new 'TTK PersistenceCurve' tTKPersistenceCurve1 = TTKPersistenceCurve ( Input = elevation ) tTKPersistenceCurve1 . ScalarField = [ 'POINTS' , 'Elevation' ] # create a new 'TTK PersistenceDiagram' tTKPersistenceDiagram1 = TTKPersistenceDiagram ( Input = elevation ) tTKPersistenceDiagram1 . ScalarField = [ 'POINTS' , 'Elevation' ] # create a new 'Threshold' pairs = Threshold ( Input = tTKPersistenceDiagram1 ) pairs . Scalars = [ 'CELLS' , 'PairIdentifier' ] pairs . ThresholdRange = [ 0.0 , 1000.0 ] # create a new 'Threshold' persistenceThreshold = Threshold ( Input = pairs ) persistenceThreshold . Scalars = [ 'CELLS' , 'Persistence' ] persistenceThreshold . ThresholdRange = [ 5.0 , 1000.0 ] # create a new 'TTK TopologicalSimplification' tTKTopologicalSimplification1 = TTKTopologicalSimplification ( Domain = elevation , Constraints = persistenceThreshold ) tTKTopologicalSimplification1 . ScalarField = [ 'POINTS' , 'Elevation' ] # create a new 'TTK ScalarFieldCriticalPoints' tTKScalarFieldCriticalPoints1 = TTKScalarFieldCriticalPoints ( Input = tTKTopologicalSimplification1 ) tTKScalarFieldCriticalPoints1 . ScalarField = [ 'POINTS' , 'Elevation' ] # create a new 'TTK Merge and Contour Tree (FTM)' tTKContourTree1 = TTKMergeandContourTreeFTM ( Input = tTKTopologicalSimplification1 ) tTKContourTree1 . ScalarField = [ 'POINTS' , 'Elevation' ] tTKContourTree1 . ArcSampling = 30 # create a new 'TTK GeometrySmoother' tTKGeometrySmoother2 = TTKGeometrySmoother ( Input = OutputPort ( tTKContourTree1 , 1 )) tTKGeometrySmoother2 . IterationNumber = 40 # create a new 'Extract Surface' extractSurface4 = ExtractSurface ( Input = tTKGeometrySmoother2 ) # create a new 'Tube' tube4 = Tube ( Input = extractSurface4 ) tube4 . NumberofSides = 12 tube4 . Radius = 0.75 # create a new 'TTK IcospheresFromPoints' tTKIcospheresFromPoints4 = TTKIcospheresFromPoints ( Input = tTKContourTree1 ) tTKIcospheresFromPoints4 . Radius = 2.0 # save the output SaveData ( 'PersistenceDiagram.vtu' , tTKPersistenceDiagram1 ) SaveData ( 'PersistenceCurve.csv' , OutputPort ( tTKPersistenceCurve1 , 3 )) SaveData ( 'CriticalPoints.vtp' , tTKScalarFieldCriticalPoints1 ) SaveData ( 'ContourTreeNodes.vtp' , tTKIcospheresFromPoints4 ) SaveData ( 'ContourTreeArcs.vtp' , tube4 )","title":"Python code"},{"location":"dragon/#inputs","text":"dragon.vtu : a two-dimensional triangulation.","title":"Inputs"},{"location":"dragon/#outputs","text":"PersistenceDiagram.vtu : the output persistence diagram in VTK file format (bottom right view, above screenshot). You are free to change the vtu file extension to that of any other supported file format (e.g. csv ) in the above python script. PersistenceCurve.csv : the output persistence curve. CriticalPoints.vtp : the output critical points in VTK file format (bottom right view, above screenshot). You are free to change the vtp file extension to that of any other supported file format (e.g. csv ) in the above python script. ContourTreeNode.vtp : spheres, representing the nodes of the output contour tree in VTK file format (bottom right view, above screenshot). You are free to change the vtp file extension to that of any other supported file format (e.g. csv ) in the above python script. ContourTreeArcs.vtp : cylinders, representing the arcs of the output contour tree in VTK file format (bottom right view, above screenshot). You are free to change the vtp file extension to that of any other supported file format (e.g. csv ) in the above python script.","title":"Outputs"},{"location":"dragon/#cpython-api","text":"ContourTree (FTM) GeometrySmoother IcospheresFromPoints PersistenceCurve PersistenceDiagram ScalarFieldCriticalPoints TopologicalSimplification","title":"C++/Python API"},{"location":"morsePersistence/","text":"Morse persistence example \u00b6 Pipeline description \u00b6 This example first loads a triangle mesh from disk. In a pre-processing, the mesh is smoothed and an elevation function is computed on top of it. The elevation function will be considered as the input scalar data in the remainder. Then, the PersistenceDiagram is computed and thresholds are applied base on persistence to maintain only the most persistent features. This results in a simplified persistence diagram (bottom right view in the above screenshot). The PersistenceCurve is also computed (top right view in the above screenshot). The simplified persistence diagram is then used as a constraint for the TopologicalSimplification of the input scalar data. This simplified data is then used as the input of the computation of ScalarFieldCriticalPoints (top left view, above screenshot) and the ContourTree (FTM) (bottom left view, above screenshot). ParaView \u00b6 To reproduce the above screenshot, go to your ttk-data directory and enter the following command: $ paraview states/dragon.pvsm Python code \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 #!/usr/bin/env python from paraview.simple import * # create a new 'XML Unstructured Grid Reader' dragonvtu = XMLUnstructuredGridReader ( FileName = [ 'dragon.vtu' ]) # create a new 'TTK GeometrySmoother' tTKGeometrySmoother1 = TTKGeometrySmoother ( Input = dragonvtu ) # create a new 'Calculator' elevation = Calculator ( Input = tTKGeometrySmoother1 ) elevation . ResultArrayName = 'Elevation' elevation . Function = 'coordsY' # create a new 'TTK PersistenceCurve' tTKPersistenceCurve1 = TTKPersistenceCurve ( Input = elevation ) tTKPersistenceCurve1 . ScalarField = [ 'POINTS' , 'Elevation' ] # create a new 'TTK PersistenceDiagram' tTKPersistenceDiagram1 = TTKPersistenceDiagram ( Input = elevation ) tTKPersistenceDiagram1 . ScalarField = [ 'POINTS' , 'Elevation' ] # create a new 'Threshold' pairs = Threshold ( Input = tTKPersistenceDiagram1 ) pairs . Scalars = [ 'CELLS' , 'PairIdentifier' ] pairs . ThresholdRange = [ 0.0 , 1000.0 ] # create a new 'Threshold' persistenceThreshold = Threshold ( Input = pairs ) persistenceThreshold . Scalars = [ 'CELLS' , 'Persistence' ] persistenceThreshold . ThresholdRange = [ 5.0 , 1000.0 ] # create a new 'TTK TopologicalSimplification' tTKTopologicalSimplification1 = TTKTopologicalSimplification ( Domain = elevation , Constraints = persistenceThreshold ) tTKTopologicalSimplification1 . ScalarField = [ 'POINTS' , 'Elevation' ] # create a new 'TTK ScalarFieldCriticalPoints' tTKScalarFieldCriticalPoints1 = TTKScalarFieldCriticalPoints ( Input = tTKTopologicalSimplification1 ) tTKScalarFieldCriticalPoints1 . ScalarField = [ 'POINTS' , 'Elevation' ] # create a new 'TTK Merge and Contour Tree (FTM)' tTKContourTree1 = TTKMergeandContourTreeFTM ( Input = tTKTopologicalSimplification1 ) tTKContourTree1 . ScalarField = [ 'POINTS' , 'Elevation' ] tTKContourTree1 . ArcSampling = 30 # create a new 'TTK GeometrySmoother' tTKGeometrySmoother2 = TTKGeometrySmoother ( Input = OutputPort ( tTKContourTree1 , 1 )) tTKGeometrySmoother2 . IterationNumber = 40 # create a new 'Extract Surface' extractSurface4 = ExtractSurface ( Input = tTKGeometrySmoother2 ) # create a new 'Tube' tube4 = Tube ( Input = extractSurface4 ) tube4 . NumberofSides = 12 tube4 . Radius = 0.75 # create a new 'TTK IcospheresFromPoints' tTKIcospheresFromPoints4 = TTKIcospheresFromPoints ( Input = tTKContourTree1 ) tTKIcospheresFromPoints4 . Radius = 2.0 # save the output SaveData ( 'PersistenceDiagram.vtu' , tTKPersistenceDiagram1 ) SaveData ( 'PersistenceCurve.csv' , OutputPort ( tTKPersistenceCurve1 , 3 )) SaveData ( 'CriticalPoints.vtp' , tTKScalarFieldCriticalPoints1 ) SaveData ( 'ContourTreeNodes.vtp' , tTKIcospheresFromPoints4 ) SaveData ( 'ContourTreeArcs.vtp' , tube4 ) Inputs \u00b6 dragon.vtu : a two-dimensional triangulation. Outputs \u00b6 PersistenceDiagram.vtu : the output persistence diagram in VTK file format (bottom right view, above screenshot). You are free to change the vtu file extension to that of any other supported file format (e.g. csv ) in the above python script. PersistenceCurve.csv : the output persistence curve. CriticalPoints.vtp : the output critical points in VTK file format (bottom right view, above screenshot). You are free to change the vtp file extension to that of any other supported file format (e.g. csv ) in the above python script. ContourTreeNode.vtp : spheres, representing the nodes of the output contour tree in VTK file format (bottom right view, above screenshot). You are free to change the vtp file extension to that of any other supported file format (e.g. csv ) in the above python script. ContourTreeArcs.vtp : cylinders, representing the arcs of the output contour tree in VTK file format (bottom right view, above screenshot). You are free to change the vtp file extension to that of any other supported file format (e.g. csv ) in the above python script. C++/Python API \u00b6 ContourTree (FTM) GeometrySmoother IcospheresFromPoints PersistenceCurve PersistenceDiagram ScalarFieldCriticalPoints TopologicalSimplification","title":"Morse persistence example"},{"location":"morsePersistence/#morse-persistence-example","text":"","title":"Morse persistence example"},{"location":"morsePersistence/#pipeline-description","text":"This example first loads a triangle mesh from disk. In a pre-processing, the mesh is smoothed and an elevation function is computed on top of it. The elevation function will be considered as the input scalar data in the remainder. Then, the PersistenceDiagram is computed and thresholds are applied base on persistence to maintain only the most persistent features. This results in a simplified persistence diagram (bottom right view in the above screenshot). The PersistenceCurve is also computed (top right view in the above screenshot). The simplified persistence diagram is then used as a constraint for the TopologicalSimplification of the input scalar data. This simplified data is then used as the input of the computation of ScalarFieldCriticalPoints (top left view, above screenshot) and the ContourTree (FTM) (bottom left view, above screenshot).","title":"Pipeline description"},{"location":"morsePersistence/#paraview","text":"To reproduce the above screenshot, go to your ttk-data directory and enter the following command: $ paraview states/dragon.pvsm","title":"ParaView"},{"location":"morsePersistence/#python-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 #!/usr/bin/env python from paraview.simple import * # create a new 'XML Unstructured Grid Reader' dragonvtu = XMLUnstructuredGridReader ( FileName = [ 'dragon.vtu' ]) # create a new 'TTK GeometrySmoother' tTKGeometrySmoother1 = TTKGeometrySmoother ( Input = dragonvtu ) # create a new 'Calculator' elevation = Calculator ( Input = tTKGeometrySmoother1 ) elevation . ResultArrayName = 'Elevation' elevation . Function = 'coordsY' # create a new 'TTK PersistenceCurve' tTKPersistenceCurve1 = TTKPersistenceCurve ( Input = elevation ) tTKPersistenceCurve1 . ScalarField = [ 'POINTS' , 'Elevation' ] # create a new 'TTK PersistenceDiagram' tTKPersistenceDiagram1 = TTKPersistenceDiagram ( Input = elevation ) tTKPersistenceDiagram1 . ScalarField = [ 'POINTS' , 'Elevation' ] # create a new 'Threshold' pairs = Threshold ( Input = tTKPersistenceDiagram1 ) pairs . Scalars = [ 'CELLS' , 'PairIdentifier' ] pairs . ThresholdRange = [ 0.0 , 1000.0 ] # create a new 'Threshold' persistenceThreshold = Threshold ( Input = pairs ) persistenceThreshold . Scalars = [ 'CELLS' , 'Persistence' ] persistenceThreshold . ThresholdRange = [ 5.0 , 1000.0 ] # create a new 'TTK TopologicalSimplification' tTKTopologicalSimplification1 = TTKTopologicalSimplification ( Domain = elevation , Constraints = persistenceThreshold ) tTKTopologicalSimplification1 . ScalarField = [ 'POINTS' , 'Elevation' ] # create a new 'TTK ScalarFieldCriticalPoints' tTKScalarFieldCriticalPoints1 = TTKScalarFieldCriticalPoints ( Input = tTKTopologicalSimplification1 ) tTKScalarFieldCriticalPoints1 . ScalarField = [ 'POINTS' , 'Elevation' ] # create a new 'TTK Merge and Contour Tree (FTM)' tTKContourTree1 = TTKMergeandContourTreeFTM ( Input = tTKTopologicalSimplification1 ) tTKContourTree1 . ScalarField = [ 'POINTS' , 'Elevation' ] tTKContourTree1 . ArcSampling = 30 # create a new 'TTK GeometrySmoother' tTKGeometrySmoother2 = TTKGeometrySmoother ( Input = OutputPort ( tTKContourTree1 , 1 )) tTKGeometrySmoother2 . IterationNumber = 40 # create a new 'Extract Surface' extractSurface4 = ExtractSurface ( Input = tTKGeometrySmoother2 ) # create a new 'Tube' tube4 = Tube ( Input = extractSurface4 ) tube4 . NumberofSides = 12 tube4 . Radius = 0.75 # create a new 'TTK IcospheresFromPoints' tTKIcospheresFromPoints4 = TTKIcospheresFromPoints ( Input = tTKContourTree1 ) tTKIcospheresFromPoints4 . Radius = 2.0 # save the output SaveData ( 'PersistenceDiagram.vtu' , tTKPersistenceDiagram1 ) SaveData ( 'PersistenceCurve.csv' , OutputPort ( tTKPersistenceCurve1 , 3 )) SaveData ( 'CriticalPoints.vtp' , tTKScalarFieldCriticalPoints1 ) SaveData ( 'ContourTreeNodes.vtp' , tTKIcospheresFromPoints4 ) SaveData ( 'ContourTreeArcs.vtp' , tube4 )","title":"Python code"},{"location":"morsePersistence/#inputs","text":"dragon.vtu : a two-dimensional triangulation.","title":"Inputs"},{"location":"morsePersistence/#outputs","text":"PersistenceDiagram.vtu : the output persistence diagram in VTK file format (bottom right view, above screenshot). You are free to change the vtu file extension to that of any other supported file format (e.g. csv ) in the above python script. PersistenceCurve.csv : the output persistence curve. CriticalPoints.vtp : the output critical points in VTK file format (bottom right view, above screenshot). You are free to change the vtp file extension to that of any other supported file format (e.g. csv ) in the above python script. ContourTreeNode.vtp : spheres, representing the nodes of the output contour tree in VTK file format (bottom right view, above screenshot). You are free to change the vtp file extension to that of any other supported file format (e.g. csv ) in the above python script. ContourTreeArcs.vtp : cylinders, representing the arcs of the output contour tree in VTK file format (bottom right view, above screenshot). You are free to change the vtp file extension to that of any other supported file format (e.g. csv ) in the above python script.","title":"Outputs"},{"location":"morsePersistence/#cpython-api","text":"ContourTree (FTM) GeometrySmoother IcospheresFromPoints PersistenceCurve PersistenceDiagram ScalarFieldCriticalPoints TopologicalSimplification","title":"C++/Python API"}]}